/*
 *   Copyright (c) 2025 Nazmul Idris
 *   All rights reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

#[macro_export]
macro_rules! create_impl_block {
    ($struct_name:ty) => {
        impl $struct_name {
            pub fn new() -> Self {
                Self(0)
            }
        }
    };
}

use paste::paste;

#[macro_export]
macro_rules! create_method_with_prefix {
    ($struct_name:ty, $method_name:ident) => {
        paste! {
            impl $struct_name {
                #[doc = concat!(
                    "Method foo_", stringify!($method_name), " is generated by macro."
                )]
                pub fn [<foo_ $method_name>]() -> String {
                    format!("Hello from foo_{}!", stringify!($method_name))
                }
            }
        }
    };
}

pub struct MyStruct(usize);
create_impl_block!(MyStruct);
create_method_with_prefix!(MyStruct, bar);

pub fn top_level_public_fn() {
    let instance = MyStruct::new();
    assert_eq!(instance.0, 0);
    let res = MyStruct::foo_bar();
    println!("{}", res);
}
